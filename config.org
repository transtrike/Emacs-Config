#+title: Emacs From Scratch Configuration
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el :mkdirp yes
#+auto_tangle: t

* Welcome to my Emacs config
Some bla bla stuff goes here


* Startup


  ** Initial setup
  #+begin_src emacs-lisp

  ;; You will most likely need to adjust this font size for your system!
  (defvar ts/default-font-size 120)
  (defvar ts/default-variable-font-size 120)

  ;; Make frame transparency overridable
  (defvar ts/frame-transparency '(90 . 90))

  #+end_src

  ** Performace
  #+begin_src emacs-lisp

  ;; The default is 800 kilobytes.  Measured in bytes.
  (setq gc-cons-threshold (* 100 1024 1024))

  (defun ts/display-startup-time ()
    (message "Emacs loaded in %s with %d garbage collections."
	     (format "%.2f seconds"
		     (float-time
		      (time-subtract after-init-time before-init-time)
		      ))
	     gcs-done))

  (add-hook 'emacs-startup-hook 'ts/display-startup-time)

  #+end_src

  ** Package initialization
  #+begin_src emacs-lisp

  (setq straight-fix-flycheck t)
  (setq straight-use-package-by-default t)

  (defvar bootstrap-version)
  (let ((bootstrap-file
	 (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
	(bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
	  (url-retrieve-synchronously
	   "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
	   'silent 'inhibit-cookies)
	(goto-char (point-max))
	(eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))

  (straight-use-package 'use-package)
  (setq straight-always-use-package-ensure t)

  (straight-register-package 'org)
  (straight-register-package 'org-contrib)

  #+end_src

  ** Required packages for config comfort or nessessaty
  #+begin_src emacs-lisp

  (use-package bind-key
    :demand t)

  #+end_src

  ** Keep folders clean
  #+begin_src emacs-lisp

  ;; Set user's directory for config files
  ;; (setq user-emacs-directory "/opt/emacs-config")

  (use-package no-littering
    :demand t)
  ;; Keep auto-save files away, so they don't trash the current directory
  (setq auto-save-file-name-transforms
	`((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))

  #+end_src

  ** Jump to config file
  The current file, you dumbass...
    #+begin_src emacs-lisp

    (setq user-init-file (expand-file-name "config.org" user-emacs-directory))
    (bind-key "C-c c" (lambda() (interactive)(find-file "~/.emacs.d/config.org")))

    #+end_src


  ** Emacs as a daemon
  This is really a section to explain that a user can pay the cost of emacs initialization only once
  Linux: use systemd to load emacs at startup and connect with a client
  As user run in a shell `systemctl enable emacs --user` and connect to emacs with `emacsclient -c`


* UI improvements


  #+begin_src emacs-lisp

  ;; Remove startup message and scratch buffer
  (setq inhibit-startup-message t)
  (setq initial-scratch-message nil)

  (scroll-bar-mode -1)        ; Disabled visible scrollbar
  (tool-bar-mode -1)          ; Disabled the toolbar
  (tooltip-mode -1)           ; Disabled tooltips
  (set-fringe-mode 10)        ; Give some breathing room

  (menu-bar-mode -1)          ; Disabled the menu bar

  (column-number-mode)
  (global-display-line-numbers-mode t)

  ;; Smooth scrolling
  (setq redisplay-dont-pause t
	scroll-margin 1
	scroll-step 1
	scroll-conservatively 10000
	scroll-preserve-screen-position 1)

  ;; Debug errors, if you mess up the config
  (setq debug-on-error t)

  ;; Start every Emacs frame(instance) maximized
  (add-to-list 'default-frame-alist '(fullscreen . maximized))

  ;; Disabled line numbers for some modes
  (dolist (mode '(org-mode-hook
		  term-mode-hook
		  shell-mode-hook
		  treemacs-mode-hook
		  eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))

  #+end_src

  ** Font Configuration
  I am using the [[https://github.com/tonsky/FiraCode][Fira Code]] and [[https://fonts.google.com/specimen/Cantarell][Cantarell]] fonts for this configuration which will more than likely need to be installed on your machine.  Both can usually be found in the various Linux distro package managers or downloaded from the links above.
  #+begin_src emacs-lisp

  (defun ts/set-font-faces ()
    (message "Setting fonts!")
    (set-face-attribute 'default nil
			:font "Fira Code Retina"
			:height ts/default-font-size)

    ;; Set the fixed pitch face
    (set-face-attribute 'fixed-pitch nil
			:font "Fira Code Retina"
			:height ts/default-font-size)

    ;; Set the variable pitch face
    (set-face-attribute 'variable-pitch nil
			:font "Cantarell"
			:height ts/default-variable-font-size :weight 'regular))

  (if (daemonp)
      (add-hook 'after-make-frame-functions
		(lambda(frame)
		  (setq doom-modeline-icon t)
		  (with-selected-frame frame (ts/set-font-faces))))
    (ts/set-font-faces))

  #+end_src

  ** IBuffer
  #+begin_src emacs-lisp

  (setq-default ibuffer-saved-filter-groups
		`(("Default"
		   ("Temporary" (name . "\*.*\*"))
		   ("Magit" (name . "^magit")))))

  (add-hook 'ibuffer-mode-hook
	    (lambda ()
	      (ibuffer-auto-mode 1)
	      (ibuffer-switch-to-saved-filter-groups "Default")))

  (setq ibuffer-show-empty-filter-groups nil
	ibuffer-expert t)

  #+end_src

  ** Window
  By default, `split-window-vertically` and `split-window-horizontally`` display the current buffer twice.
  Most of the time I’ll change the buffer in the second window, which is why this snippet looks really handy:
  #+begin_src emacs-lisp

  (defun fw/vsplit-last-buffer ()
    "Split the selected window into two vertical windows."
    (interactive)
    (split-window-vertically)
    (other-window 1)
    (switch-to-next-buffer))

  (defun fw/hsplit-last-buffer ()
    "Split the selected window into two horizontal windows."
    (interactive)
    (split-window-horizontally)
    (other-window 1)
    (switch-to-next-buffer))

  (defun fw/kill-this-buffer ()
    "Kills this buffer and removes this window when split."
    (interactive)
    (kill-this-buffer)
    (when (> (length (window-list)) 1)
      (delete-window)))

  #+end_src


* UI Configuration


  ** Color theme
  Using the doom-themes package, since those themes are lit af
  [Doom themes screenshots](https://github.com/hlissner/emacs-doom-themes/blob/screenshots/doom-laserwave.png)
  Cool themes doom-*:
   - city-lights, dracula, horizon, lazerwave, mineral, moonlight, nord, one, spacegray
  #+begin_src emacs-lisp

  (use-package doom-themes
    :demand t
    :config
    (setq doom-themes-enable-bold t
	  doom-themes-enable-italic t)
    (load-theme 'doom-one t)
    ;;(doom-themes-neotree-config) ;; Load a custom theme for neotree
    (doom-themes-org-config)) ;; Improve org mode's native fontification

  #+end_src

  ** Better modeline
  *NOTE*: You have to run `M-x all-the-icons-install-fonts` so that mode
  line icons are loaded and installed correctly
  #+begin_src emacs-lisp

  (use-package all-the-icons
    :after doom-modeline)

  (use-package doom-modeline
    :demand t
    :config (doom-modeline-mode 1)
    :custom
    (doom-modeline-height 15)
    (doom-modeline-lsp t))

  #+end_src


* Keyboard Configuration


  ** One line keybindings
  #+begin_src emacs-lisp

  ;; ESC quit prompts(like in VIM)
  (bind-key "<escape>" 'keyboard-escape-quit)

  ;; Save ma'h FILEEEEE
  (bind-key* "C-s" 'save-buffer)

  #+end_src

  ** File reloading
  Reload file, if it was changed on the disk
  #+begin_src emacs-lisp

  (global-auto-revert-mode t)

  #+end_src

  ** Evil mode
  This configuration uses [[https://evil.readthedocs.io/en/latest/index.html][evil-mode]] for a Vi-like modal editing experience.
  [[https://github.com/noctuid/general.el][general.el]] is used for easy keybinding configuration that integrates well with which-key.
  [[https://github.com/emacs-evil/evil-collection][evil-collection]] is used to automatically configure various Emacs modes with Vi-like keybindings for evil-mode.
  * The "C-<something>" stands for Ctrl <something>
  * The "M-<something>" stands for Meta(also called Alt) <something>
  * Example: "C-g" is clicking at the same time "Ctrl" and "g"
  #+begin_src emacs-lisp

    (use-package general
      :demand t
      :after evil
      :config
      (general-auto-unbind-keys)
      ;; Define leaders keys to use later on
      (general-create-definer ts/buffer-keys
	:keymaps '(normal insert visual emacs)
	:prefix "C-b")

      (general-create-definer ts/leader-key
	:keymap '(normal visual emacs)
	:prefix "C-SPC"))

    (use-package evil
      :demand t
      :init
      (setq evil-want-integration t)
      (setq evil-want-keybinding nil)
      ;;(setq evil-want-C-u-scroll t) ;; Scroll with C-u
      (setq evil-want-C-i-jump nil)
      :config
      ;; Exit any state when something goes wrong with C-g
      (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
      (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

      ;; Use visual line motions even outside of visual-line-mode buffers
      (evil-global-set-key 'motion "j" 'evil-next-visual-line)
      (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

      (evil-set-initial-state 'messages-buffer-mode 'normal)
      (evil-set-initial-state 'dashboard-mode 'normal)

      (evil-mode 1))

    (use-package evil-collection
      :after evil
      :config
      (evil-collection-init))

  #+end_src

  Undo Tree
  Undo visualizer and tree system for better messing up your files and then restoring them
  #+begin_src emacs-lisp

  ;; Define Evil undo system
  (use-package undo-tree
    :demand t
    :after evil
    :init
    (global-undo-tree-mode)
    :config
    (setq undo-tree-show-minibuffer-help t)
    (setq evil-undo-system 'undo-redo)
    ;; Automatically save and restore undo-tree history
    (setq undo-tree-auto-save-history t)
    :bind (:map evil-normal-state-map
		("u" . undo-tree-undo)
		("C-r" . undo-tree-redo)))

  (bind-key* "C-z" 'undo-tree-undo)
  (bind-key* "C-y" 'undo-tree-redo)

  #+end_src

  ** Which key
  [[https://github.com/justbur/emacs-which-key][which-key]] is a useful UI panel that appears when you start pressing any key binding in Emacs to offer you all possible completions for the prefix.
  Example: Pressing "C-c" will show a panel at the bottom of the frame displaying all of the bindings under that prefix and which command they run.
  #+begin_src emacs-lisp

  (use-package which-key
    :defer 1
    :diminish which-key-mode
    :config
    (setq which-key-idle-delay 0.3) ;; How long until the tooltip shows
    (setq which-key-special-keys '("SPC" "TAB" "RET" "ESC" "DEL")) ;; Show special keys as more then 1 char
    (setq which-key-sort-order 'which-key-key-order-alpha) ;; Order alphabetically
    (setq which-key-popup-type 'side-window) ;; Popup config
    (setq which-key-side-window-location 'bottom) ;; Appear at the bottom
    (which-key-mode))

  ;; Setup special keys to show as symbols
  ;;(add-to-list 'which-key-replacement-alist '(("TAB" . nil) . ("↹" . nil)))
  ;;(add-to-list 'which-key-replacement-alist '(("RET" . nil) . ("⏎" . nil)))
  ;;(add-to-list 'which-key-replacement-alist '(("DEL" . nil) . ("⇤" . nil)))
  ;;(add-to-list 'which-key-replacement-alist '(("SPC" . nil) . ("␣" . nil)))

  #+end_src

  ** Hydra
  "Keybindings that stick around"... Whatever the fuck that means...
  #+begin_src emacs-lisp

    (use-package hydra)

    (defhydra hydra-window ()
      "Window"
      ("h" windmove-left)
      ("l" windmove-right)
      ("j" windmove-down)
      ("k" windmove-up))

    (ts/leader-key
      "w" '(hydra-window/body :which-key "Windows"))

  #+end_src


* Editor & Files improvements


  ** Basic file config
  #+begin_src emacs-lisp

  ;; Prefer UTF-8
  (prefer-coding-system 'utf-8)

  ;; Mark matching pairs of parentheses
  (show-paren-mode t)
  (setq show-paren-delay 0.0)

  ;; Delete trailing whitespaces
  (add-hook 'before-save-hook 'delete-trailing-whitespace)

  ;; Ensure files end with a new line
  (setq require-final-newline t)

  #+end_src

  ** Smartparens
  Smartly dealing with parentheses
  #+begin_src emacs-lisp

  (use-package smartparens
    :defer 1
    :init
    (smartparens-global-mode)
    ;; Enable strict mode(don't enable it for a config file like this one)
    ;; (smartparens-strict-mode)
  )

  #+end_src

  ** Smarter comments
  #+begin_src emacs-lisp

  (use-package evil-nerd-commenter
    :defer 1
    :bind
    (("C-/" . evilnc-comment-or-uncomment-lines)
     ("M-;" . evilnc-comment-or-uncomment-lines)))

  #+end_src

  ** Auto-Saving Changed Files
  #+begin_src emacs-lisp

  (use-package super-save
    :defer 1
    :diminish super-save-mode
    :config
    (super-save-mode +1)
    (setq super-save-auto-save-when-idle t))

  #+end_src

  ** Org mode

    *** Add templates for code blocks
    #+begin_src emacs-lisp

    (require 'org-tempo)

    (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
    (add-to-list 'org-structure-template-alist '("py" . "src python"))
    (add-to-list 'org-structure-template-alist '("cs" . "src csharp"))

    #+end_src

    *** Improve Org mode's source code blocks
    #+begin_src emacs-lisp

    (setq org-src-fontify-natively t
	  org-src-tab-acts-natively t
	  org-src-window-setup 'current-window
	  org-edit-src-content-indentation 0)

    #+end_src

    *** Highlighting and code evaluation
    The ability to evaluate code and have highlighting in the code blocks
    Commands:
    - evaluate-last-expression -> Place on the last parenthesis and click "C-x C-e" to
    execute that particular expression
    - org-ctrl-c-ctrl-c-hook -> Cursor placed inside a code block and clicking "C-c C-c"
    evaluates the code block as if the config is reloaded
    #+begin_src emacs-lisp

    (org-babel-do-load-languages
     'org-babel-load-lanaguages
     '(
       (emacs-lisp . t)
       (python . t)
       ))

    (setq org-confirm-babel-evaluate nil)

    #+end_src

    ** Tangle org files on save
    #+begin_src emacs-lisp

    (use-package org-auto-tangle
      :defer t
      :hook (org-mode . org-auto-tangle-mode))

    #+end_src

  ** Save session
  #+begin_src emacs-lisp

  ;; If you want to save and restore sessions
  ;; (desktop-save-mode t)

  #+end_src


* Packages

  ** Magit
  The famous magit!
  #+begin_src emacs-lisp

  (use-package magit
    :commands (magit-status))

  ;; Spellcheck the commits
  (add-hook 'git-commit-mode-hook 'flyspell-mode)

  #+end_src

  ** Ivy & Counsel
  Generic completion mechanism, paired with ivy-enchanced versions of common Emacs commands
  #+begin_src emacs-lisp

  (use-package ivy
    :demand t
    :bind (:map ivy-minibuffer-map
		("TAB" . ivy-alt-done)
		("C-j" . ivy-next-line)
		("C-k" . ivy-previous-line)
		:map ivy-switch-buffer-map
		("C-j" . ivy-next-line)
		("C-k" . ivy-previous-line)
		("TAB" . ivy-done)
		("C-d" . ivy-switch-buffer-kill))
    :config
    (ivy-mode 1))

  #+end_src

  #+begin_src emacs-lisp

  (use-package counsel
    :after ivy
    :bind (("M-x" . counsel-M-x) ;; Enchanced M-x
	   ("C-x C-f" . counsel-find-file))) ;; Enchanced Find File

  (ts/buffer-keys
    "b" 'counsel-switch-buffer)

  #+end_src

  ** Swiper
  Fuzzy searching, Ivy-enchanced version of Isearch
  #+begin_src emacs-lisp

  (use-package swiper
    :after ivy
    :bind (:map evil-normal-state-map
		("/" . swiper)) ;; Bind "/", in normal mode, to swiper
    :config
    (add-to-list 'ivy-height-alist '(swiper . 5))) ;; Make swiper's hight to 5

  #+end_src

  * Company
  Text completion framework(IntelliSense).
  From now on, every language must be added as a backend to this one.
  Configure all programming language packages with ":after company"
  #+begin_src emacs-lisp

  (use-package company
    :demand t
    :bind
    (:map evil-normal-state-map
	  ("M-." . company-complete))
    :config
    (add-hook 'after-init-hook 'global-company-mode)
    (company-mode))

  #+end_src

  * Typos never again!
  - Flycheck: For code errors!
  - Flyspell: Grammar errors!
  #+begin_src emacs-lisp

  (use-package flycheck
    :demand t
    :init
    (global-flycheck-mode))

  (use-package flyspell
    :defer 2
    :init
    (flyspell-mode 1)
    :hook
    (text-mode . flyspell-mode)
    (prog-mode . flyspell-prog-mode))

  #+end_src

  * Vertigo
  Could replace Ivy & Counsel, using Emacs' own API.
  Currently *disabled*!
  #+begin_src emacs-lisp

  ;; (use-package vertico
  ;;   :bind (:map vertico-map
  ;; 		("C-j" . vertico-next)
  ;; 		("C-k" . vertico-previous)
  ;; 		("C-f" . vertico-exit)
  ;; 		:map minibuffer-local-map
  ;; 		("M-h" . backward-kill-word))
  ;;   :custom
  ;;   (vertico-cycle t)
  ;;   :init
  ;;   (vertico-mode))

  ;; (use-package savehist
  ;;   :after vertigo
  ;;   :init
  ;;   (savehist-mode))

  ;; (use-package marginalia
  ;;   :after vertico
  ;;   :custom
  ;;   (marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil))
  ;;   :init
  ;;   (marginalia-mode))

  #+end_src

  * Helpful
  Better keyboard, commands and such documentation(tl;dr better *help* buffer)
  #+begin_src emacs-lisp

  (use-package helpful
    :defer 1
    :bind (("C-h f" . helpful-callable)
	   ("C-h v" . helpful-variable)
	   ("C-h k" . helpful-key)
	   ("C-h C" . helpful-command)))

  #+end_src

  * Projectile
  Projects management
  #+begin_src emacs-lisp

	(use-package projectile
	  :demand t
	  :config
	  (projectile-mode)
	  (setq projectile-enable-caching t)
	  (setq projectile-indexing-method 'alien)
	  (setq projectile-globally-ignored-file-suffixes
		'("#" "~" ".swp" ".o" ".so" ".exe" ".dll" ".elc" ".pyc" ".jar"))
	  (setq projectile-globally-ignored-directories
		'(".git" "node_modules" "__pycache__" ".vs"))
	  (setq projectile-globally-ignored-files '("TAGS" "tags" ".DS_Store")))

	(ts/leader-key
	  "p" '(:ignore t :which-key "Projects")
	  "p a" 'projectile-add-known-project
	  "p ." 'projectile-switch-project
	  "p ")

  #+end_src

  * Snippets
  Let the minions do the hard work
  #+begin_src emacs-lisp

  (use-package yasnippet
    :defer 1
    :config
    (yas-global-mode 1))

  #+end_src


* Navigation


  * Shell/Terminal
  #+begin_src emacs-lisp

  ;; Default shell of choise: eshell
  ;; (use-package eshell)

  ;; (bind-key* "M-1" 'eshell evil-normal-state-map)

  #+end_src

  ** Workspaces
  #+begin_src emacs-lisp

  (use-package perspective
    :demand t
    :bind (("C-M-k" . persp-switch)
	   ("C-M-n" . persp-next)
	   ("C-x k" . persp-kill-buffer*))
    :custom

(persp-initial-frame-name "Main")
    :config
    (unless (equal persp-mode t)
      (persp-mode)))

  #+end_src


* Languages


  * Language Server Protocol
  VS Code brings LSP to the masses. Allows to plug-and-config servers
  for various programming languages to get autocompletion results
  #+begin_src emacs-lisp

  (use-package lsp-mode
    :commands (lsp lsp-deferred)
    :init
    (setq lsp-keymap-prefix "C-l")
    :config
    (lsp-enable-which-key-integration t))

  (use-package lsp-ui
    :custom
    (lsp-ui-sideline-enable t)
    (lsp-ui-doc-enable t)
    (lsp-ui-doc-position 'at-point)
    (lsp-ui-doc-show-with-cursor t)
    (lsp-ui-sideline-show-diagnostic)
    (lsp-ui-sideline-code-actions t)
    (lsp-ui-sideline-update-mode 'line))

  ;; Integrate lsp and company
  (use-package company-lsp
    :config
    (setq company-lsp-cache-candidates 'auto)
    (setq company-lsp-async t)
    (setq company-lsp-enable-snippet t)
    (setq company-lsp-enable-recompletion t))

  #+end_src

  * Dap Mode
  #+begin_src emacs-lisp

  (use-package dap-mode
    :config
    (dap-auto-configure-mode)
    (dap-ui-mode 1)
    (dap-tooltip-mode 1)
    (tooltip-mode 1)
    (dap-ui-controls-mode 1))

  ;; Add Rust config
  (dap-register-debug-template "Rust::GDB Run Configuration"
			     (list :type "gdb"
				   :request "launch"
				   :name "GDB::Run"
			   :gdbpath "rust-gdb"
				   :target nil
				   :cwd nil))

  #+end_src

  * CSharp & Omnisharp(TODO: Finish and add omnisharp)
  #+begin_src emacs-lisp

  (use-package csharp-mode
    :hook lsp-mode
    :config
    (add-to-list 'auto-mode-alist '("\\.cs\\'" . csharp-tree-sitter-mode)))

  (defun my-csharp-mode-hook-config ()
    ;; enable the stuff you want for C# here
    (electric-pair-mode 1)       ;; Emacs 24
    (electric-pair-local-mode 1) ;; Emacs 25
    (add-hook 'csharp-mode-hook 'flycheck-mode)
    (add-hook 'csharp-mode-map 'yas-minor-mode)
    (add-hook 'csharp-mode-hook 'omnisharp-mode)
    (add-to-list 'auto-mode-alist '("\\.csproj\\'" . nxml-mode))
    (add-to-list 'company-backends 'company-omnisharp)

    (setq c-syntactic-indentation t)
    (c-set-style "ellemtel")
    (setq c-basic-offset 4)
    (setq truncate-lines t))

  (use-package omnisharp
    :hook lsp-mode
    :straight `(omnisharp
		:type git
		:host github
		:repo "OmniSharp/omnisharp-roslyn"
		:after company)
    :bind (:map csharp-mode-map
		("M-3" . omnisharp-solution-errors)
		("." . omnisharp-auto-complete)
		;;("<C-SPC>" . omnisharp-auto-complete)
		("<f12>" . omnisharp-go-to-definition)
		("g u" . omnisharp-find-usages)
		("g I" . omnisharp-find-implementations)
		("g o" . omnisharp-go-to-definition-other-window)
		("g r" . omnisharp-run-code-action-refactoring)
		("g f" . omnisharp-fix-code-issue-at-point)
		("g F" . omnisharp-fix-usings)
		("g R" . omnisharp-rename)
		(", i" . omnisharp-current-type-information)
		(", I" . omnisharp-current-type-documentation)
		("." . omnisharp-add-dot-and-auto-complete)
		(", n t" . omnisharp-navigate-to-current-file-member)
		(", n s" . omnisharp-navigate-to-solution-member)
		(", n f" . omnisharp-navigate-to-solution-file-then-file-member)
		(", n F" . omnisharp-navigate-to-solution-file)
		(", n r" . omnisharp-navigate-to-region))
  :config
  (setq omnisharp-server-executable-path (expand-file-name "config/omnisharp" user-emacs-directory))
  (setq omnisharp-auto-complete-want-documentation nil) ;; If docs fetching is a problem, comment this
  (add-hook 'csharp-mode-hook 'my-csharp-mode-hook-config))

  #+end_src
